x
D
Dat
X <- matrix(ncol = length(x), ncol  = length(x))
X <- matrix(ncol = length(x), nrow  = length(x))
for(i in 1:length(x)){
X[,i] <- x^i
}
lm(y ~ X)
x <- runif(12)
y <- 2*x + 1 + rnorm(12)*0.1
plot(x, y, pch = 19, "Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19, "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
lm(y ~ X)
plot(x, y, pch = 19, "Non interpolating fit" )
abline(lm(y ~ x))
x <- rnorm(12)
y <- 2*x + 1 + rnorm(12)*0.1
plot(x, y, pch = 19, "Non interpolating fit" )
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
x <- rnorm(12)
y <- 2*x + 1 + rnorm(12)
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
lm(y ~ X)
lm(y ~ X)$coeffs
mod <- lm(y ~ X)
mod$coefficients
lines(x, X0 %*% mod$coefficients)
X0 <- cbind(1 , X)
lines(x, X0 %*% mod$coefficients)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
X0 <- cbind(1 , X)
mod <- lm(y ~ X)
lines(x, X0 %*% mod$coefficients)
par(mfrow-c(1,2))
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
X0 <- cbind(1 , X)
mod <- lm(y ~ X)
lines(x, X0 %*% mod$coefficients)
Xnew <- matrix(ncol = length(x)-1, nrow=length(x))
for(i in 1:length(x)-1){
Xnew[,i+1] = x^i
}
Xnew <- matrix(ncol = length(x)-1, nrow=length(x))
for(i in 1:length(x)-1){
Xnew[,i+1] = x^i
}
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(x))
Xnew <- matrix(ncol = length(x)-1, nrow=length(x))
for(i in 1:(length(x)-1)){
Xnew[,i] = x^i
}
mod <- lm(y ~ X)
Ynew <- predict(mod, newdata = X0)
Xnew <- as.data.frame(Xnew)
mod <- lm(y ~ X)
Ynew <- predict(mod, newdata = X0)
Xnew <- as.data.frame(Xnew)
Ynew <- predict(mod, newdata = Xnew)
lines(xnew, Ynew)
length(xnew)
Ynew
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
for(i in 1:(length(x)-1)){
Xnew[,i] = xnew^i
}
Xnew <- as.data.frame(Xnew)
mod <- lm(y ~ X)
Ynew <- predict(mod, newdata = Xnew)
lines(xnew, Ynew)
length(xnew)
Ynew
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
Xnew[,1]
xnew^i
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
for(i in 1:(length(x)-1)){
Xnew[,i] = xnew^i
}
Xnew <- as.data.frame(Xnew)
Xnew
dim(Xnew)
mod <- lm(y ~ X)
Ynew <- predict(mod, newdata = Xnew)
lines(xnew, Ynew)
length(xnew)
Ynew <- Xnew %*% mod$coefficients
dim(Xnew)
Xnew <- cbind(1,Xnew)
mod <- lm(y ~ X)
Ynew <- Xnew %*% mod$coefficients
lines(xnew, Ynew)
length(xnew)
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
abline(lm(y ~ x))
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
for(i in 1:(length(x)-1)){
Xnew[,i] = xnew^i
}
Xnew <- cbind(1,Xnew)
mod <- lm(y ~ X)
Ynew <- Xnew %*% mod$coefficients
lines(xnew, Ynew)
length(xnew)
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
for(i in 1:(length(x)-1)){
Xnew[,i] = xnew^i
}
Xnew <- cbind(1,Xnew)
mod <- lm(y ~ X)
Ynew <- Xnew %*% mod$coefficients
lines(xnew, Ynew)
length(xnew)
range(Ynew)
y0 <- 2*x0 + 1 + rnorm(length(x0))
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
x0 <- rnorm(30)
y0 <- 2*x0 + 1 + rnorm(length(x0))
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
plot(x, y, pch = 19,main= "Interpolating fit" )
points(x0,y0, col=2, pch=4)
set.seed(2369)
x <- rnorm(12)
x <- sort(x)
y <- 2*x + 1 + rnorm(12)
x0 <- rnorm(30)
y0 <- 2*x0 + 1 + rnorm(length(x0))
par(mfrow=c(1,2))
plot(x, y, pch = 19, main="Non interpolating fit" )
abline(lm(y ~ x))
points(x0,y0, col=2, pch=4)
plot(x, y, pch = 19,main= "Interpolating fit" )
X <- matrix(ncol = length(x)-1, nrow  = length(x))
for(i in 1:length(x)-1){
X[,i] <- x^i
}
xnew <- seq(-2,2, length=200)
Xnew <- matrix(ncol = length(x)-1, nrow=length(xnew))
for(i in 1:(length(x)-1)){
Xnew[,i] = xnew^i
}
Xnew <- cbind(1,Xnew)
mod <- lm(y ~ X)
Ynew <- Xnew %*% mod$coefficients
points(x0,y0, col=2, pch=4)
lines(xnew, Ynew)
length(xnew)
lm(y ~ x)
mean((y0 - 1.081 + 1.808 *x0 )^2)
mean((y0 - Ynew)^2)
Ynew
y0
Xx <- matrix(ncol = 12, nrow=length(x0))
for(i in 1:(length(x0)-1)){
Xx[,i+1] = x0^i
}
i
for(i in 1:(length(x)-1)){
Xx[,i+1] = x0^i
}
Xx[,1] <- rep(1, length(x0))
Y0 <- mod$coefficients %*% Xx
Y0 <- Xx %*%  mod$coefficients
mean((y0 - Ynew)^2)
y0
mean((y0 - Y0)^2)
4*17
f <- function(x){
sqrt(3)*(1-cos(x))/sin(x)
}
x <- seq(-pi, pi, length=100)
plot(x, f(x))
f <- function(x){
sqrt(3)*(1-cos(x))/sin(x)
}
x <- seq(-pi, pi, length=1000)
plot(x, f(x))
x
f <- function(x){
sqrt(3)*(1-cos(x))/sin(x)
}
x <- seq(-pi+0.01, pi-0.01, length=1000)
plot(x, f(x))
which(abs(f(x))<1)
plot(x, f(x))
plot(x[which(abs(f(x))<1)], f(x[which(abs(f(x))<1)]))
set.seed(2368)
y <- 2*x - 1.5 + rnorm(length(x))*0.2
mod <- lm(y~x)
summary(mod)
sum((mod$fitted.values-mean(y))^2)/sum((y - mean(y))^2)
set.seed(2368)
x <- runif(40)
y <- 2*x - 1.5 + rnorm(length(x))
mod <- lm(y~x)
summary(mod)
sum((mod$fitted.values-mean(y))^2)/sum((y - mean(y))^2)
par
par()
rdirichlet <- function(n){
top <- rgamma(n, 1, 1)
top/sum(top)
}
plot(rdirichlet(3))
sum(rdirichlet(4       ))
sum(rdirichlet(4       ))
sum(rdirichlet(4       ))
make.mat <- function(){
matrix(rep(rdirichlet(3)),ncol=3, byrow = T)
}
mat.mat
make.mat
make.mat()
make.mat <- function(){
matrix(rep(rdirichlet(3*3)),ncol=3, byrow = T)
}
make.mat()
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
make.mat()
rowSums(make.mat())
evals
eigen(make.mat())
eigen(make.mat())
eigen(make.mat())
eigen(make.mat())
eigen(make.mat())
eigen(make.mat())
eigen(make.mat())
eigen(t(make.mat()))
eigen(t(make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))
eigen((make.mat()))$vecs
eigen((make.mat()))$vec
?eigen
pi <- c(1,1,1)/3
evals[1,]
evals <- matrix(ncol=3, nrow=N)
N <- 100
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
pi <- c(1,1,1)/3
evals <- matrix(ncol=3, nrow=N)
evals[1,]
rdirichlet <- function(n){
top <- rgamma(n, 1, 1)
top/sum(top)
}
plot(rdirichlet(3))
N <- 100
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
pi <- c(1,1,1)/3
evals <- matrix(ncol=3, nrow=N)
for(i in 1:100){
pmat <- make.mat()
decomp <- eigen(pmat)
D <- diag(decomp$values)
pi100 <- eigen$vec %*% D^100 %*% solve(eigen$vec)
evals[i,] <- pi100
}
pmat <- make.mat()
decomp <- eigen(pmat)
D <- diag(decomp$values)
pi100 <- eigen$vec %*% D^100 %*% solve(eigen$vec)
rdirichlet <- function(n){
top <- rgamma(n, 1, 1)
top/sum(top)
}
plot(rdirichlet(3))
N <- 100
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
pi <- c(1,1,1)/3
evals <- matrix(ncol=3, nrow=N)
for(i in 1:100){
pmat <- make.mat()
decomp <- eigen(pmat)
D <- diag(decomp$values)
pi100 <- decomp$vec %*% D^100 %*% solve(decomp$vec)
evals[i,] <- pi100
}
pi100
rdirichlet <- function(n){
top <- rgamma(n, 1, 1)
top/sum(top)
}
plot(rdirichlet(3))
N <- 100
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
pi <- c(1,1,1)/3
evals <- matrix(ncol=3, nrow=N)
for(i in 1:100){
pmat <- make.mat()
decomp <- eigen(pmat)
D <- diag(decomp$values)
pi100 <- pi %*% decomp$vec %*% D^100 %*% solve(decomp$vec)
evals[i,] <- pi100
}
pi100
evals
rdirichlet <- function(n){
top <- rgamma(n, 1, 1)
top/sum(top)
}
plot(rdirichlet(3))
N <- 100
make.mat <- function(){
matrix(replicate(3, rdirichlet(3)),ncol=3, byrow = T)
}
pi <- c(1,1,1)/3
P100 <- eigs <- matrix(ncol=3, nrow=N)
for(i in 1:100){
pmat <- make.mat()
decomp <- eigen(pmat)
D <- diag(decomp$values)
pi100 <- pi %*% decomp$vec %*% D^100 %*% solve(decomp$vec)
P100[i,] <- pi100
eigs[i,] <- decomp$values
}
plot(P100,eigs)
P100-eigs
hist(P100-eigs)
hist(abs(P100-eigs))
eigs
P100
setwd("~/sml-code/compare-levels")
library(R.matlab)
cheap.mat <- exp.mat <- matrix(ncol=10, nrow=100)
for(i in 1:100){
for(j in 1:10){
filname.cheap <- paste("cheap/out",i,"-",j,".mat",sep="")
filename.exp <- paste("expensive/out",i,"-",j,".mat",sep="")
cheap.mat[i,j] <- mean(unlist(R.matlab::readMat(filname.cheap)$y[[j]]))
exp.mat[i,j] <- mean(unlist(R.matlab::readMat(filename.exp)$y[[j]]))
}
}
probit <- function(p) qnorm(p)
y.c <- rowMeans(probit(cheap.mat))[1:95]
y.e <- rowMeans(probit(exp.mat))[1:95]
plot(y.c, y.e,xlab = "Probit Availability (Cheap)", ylab = "Probit Availability (Expensive)",pch=16,main = "Cheap and Expensive Runs")
cor(y.e, y.c)^2
####
# extra analysis
abline(lm(y.e~y.c))
linmod <- lm(y.e~y.c + I(y.c^2) + I(y.c^3)+ I(y.c^4))
logmod <- lm(y.e ~ log(y.c))
summary(linmod)
x0 <- seq(from=1.4, to=1.8, length=50)
lines(x0,cbind(1, x0, x0^2, x0^3, x0^4)%*%linmod$coefficients,col=2)
lines(x0, cbind(1, log(x0))%*%logmod$coefficients,col=3)
apply(probit(cheap.mat),2, var)
apply(probit(cheap.mat),1, var)
colVars <- function(X){
apply(X, 1, var)
}
plot(colVars(probit(cheap.mat)), colVars(probit(exp.mat)))
sum(colVars(probit(cheap.mat)) < colVars(probit(exp.mat)))
sum(colVars(probit(cheap.mat)) > colVars(probit(exp.mat)))
hist(rpois(100, 100))
hist(rpois(100, 10000))
hist(rpois(100, 100000))
hist(rpois(1000, 100000))
hist(rpois(1000, 100000))
hist(rnorm(1000,10^5, 10^5),add=T)
hist(rnorm(1000,10^5, 10^(2.5),add=T))
hist(rnorm(1000,10^5, 10^(2.5)),add=T)
