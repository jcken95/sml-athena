y.hetgp1<- read.table(file = "emulator-data/y-hetgp.txt",sep=",")[,1]
y.c1 <- read.table(file = "emulator-data/y-c.txt",sep=",")[,1]
y.e1 <- read.table(file = "emulator-data/y-e.txt",sep=",")[,1]
#x data
x.test <- as.matrix(read.table(file = "emulator-data/x-val.txt",sep=","))
x.hetgp <- as.matrix(as.matrix(read.table(file = "emulator-data/x-hetgp.txt",sep=",")))
x.c <- as.matrix(read.table(file = "emulator-data/x-c.txt",sep=","))
x.e <- as.matrix(read.table(file = "emulator-data/x-e.txt",sep=","))
y.c1 <- y.c.new
## plots
par(mfrow=c(3,3))
for(i in 1:9) plot(x.test[,i],y.test1,pch=20,cex=0.6)
for(i in 1:9) plot(x.hetgp[,i],y.hetgp1,pch=20,cex=0.6)
for(i in 1:9) plot(x.e[,i],y.e1,pch=20,cex=0.6)
for(i in 1:9) plot(x.c[,i],y.c1,pch=20,cex=0.6)
## define probit
## because availability in (0,1)
probit <- function(p){
qnorm(p)
}
inv.probit <- function(q){
pnorm(q)
}
y.test <- probit(y.test1)
y.hetgp <- probit(y.hetgp1)
y.c <- probit(y.c1)
y.e <- probit(y.e1)
par(mfrow=c(3,3))
for(i in 1:9) plot(x.test[,i],y.test,pch=20,cex=0.6)
for(i in 1:9) plot(x.hetgp[,i],y.hetgp,pch=20,cex=0.6)
for(i in 1:9) plot(x.e[,i],y.e,pch=20,cex=0.6)
for(i in 1:9) plot(x.c[,i],y.c,pch=20,cex=0.6)
MSE <- function(true, pred){
mean((true-pred)^2)
}
Score <- function(y, m, v){
-((y-m)^2)/v - log(v)
}
##training data
x.e.std <- scale(x.e)
x.c.std <- scale(x.c, center = attr(x.e.std, "scaled:center"), scale = attr(x.e.std, "scaled:scale"))
x.std <- scale(x.hetgp)
##scale validation data accordingly
x.v2 <- scale(x.test, center = attr(x.e.std, "scaled:center"), scale = attr(x.e.std, "scaled:scale"))
x.v1 <- scale(x.test, center = attr(x.std, "scaled:center"), scale = attr(x.std, "scaled:scale"))
data.hetGP <- list(
m_p = 10, v_p = 10,
N = length(y.hetgp), K = 9,
x = x.std,
m_H = cbind(1, log(x.hetgp)), v_H = cbind(1, x.std),
y = as.vector(y.hetgp),
a = rep(1,length(y.hetgp)),
## prior
m_beta_m = rep(0, 10), m_beta_s = diag(10^2, 10),
m_a_theta = rep(2,9), m_b_theta = rep(1,9),
m_a_sigma = 2, m_b_sigma = 2,
m_nugget = 0,
v_beta_m = rep(0, 10), v_beta_s = diag(10^2, 10),
v_a_theta = rep(2,9), v_b_theta = rep(1,9),
v_a_sigma = 2, v_b_sigma = 2,
v_nugget_a = 2, v_nugget_b = 2
)
temp <- list()
tmp <-  rstan::optimizing(hetGP, data = data.hetGP, verbose = F, as_vector = F)
find.mode <- function(x){
rstan::optimizing(hetGP, data = data.hetGP, verbose = F, as_vector = F)
}
st.hetgp <- Sys.time()
temp <- parallel::mclapply(1:3, find.mode, mc.cores = 3)
en.hetgp <- Sys.time() - st.hetgp
en.hetgp
beepr::beep()
best.emulator <- which.max(c(temp[[1]]$value , temp[[2]]$value, temp[[3]]$value))
het.fit <- temp[[best.emulator]]
pars <- het.fit$par
## predict response for hetgp
mu.y <- cbind(1, log(x.test))%*%pars$m_beta
mu.yobs <- cbind(1, log(x.hetgp))%*%pars$m_beta
mu.y.var <- as.vector(cbind(1, x.v1)%*%pars$v_beta)
mu.yobs.var <- as.vector(cbind(1, x.std)%*%pars$v_beta)
Mean.het <- cond.mean.het(y.hetgp, x.std, x.v1, pars$m_sigma, pars$m_theta, exp(pars$logLambda), 0, mu.y, mu.yobs, 2)
Var.het <- cond.var.het(pars$logLambda, x.std, x.v1, pars$v_sigma, pars$v_theta, pars$v_nugget,mu.y.var, mu.yobs.var, 2)
Var.het <- cond.covmat.het(exp(pars$logLambda), Var.het, x.std, x.v1, pars$v_sigma, pars$v_theta, 2)
## need to get the data into shape!
n.ml <- length(y.e)
y.c2 <- rev(y.c)
y.e2 <- rev(y.e)
n.c <- length(y.c2); n.e <- length(y.e2)
x.c.std <- x.c.std[n.c:1,]
x.e.std <- x.e.std[n.ml:1,]
pairs(cbind(y.c2, x.c.std))
plot(y.c, y.e)
plot(y.c[401:495], y.e)
plot(y.c[1:95], y.e)
library(rstan)
source("GPfunctionsOptim.R")
source("hetGPfunctions.R")
hetGP <- stan_model("hetGP2.stan")
sml <- stan_model("het-SML2.stan")
## load data
#y data
y.test1 <- read.table(file = "emulator-data/y-val.txt",sep=",")[,1]
y.hetgp1<- read.table(file = "emulator-data/y-hetgp.txt",sep=",")[,1]
y.c1 <- read.table(file = "emulator-data/y-c.txt",sep=",")[,1]
y.e1 <- read.table(file = "emulator-data/y-e.txt",sep=",")[,1]
#x data
x.test <- as.matrix(read.table(file = "emulator-data/x-val.txt",sep=","))
x.hetgp <- as.matrix(as.matrix(read.table(file = "emulator-data/x-hetgp.txt",sep=",")))
x.c <- as.matrix(read.table(file = "emulator-data/x-c.txt",sep=","))
x.e <- as.matrix(read.table(file = "emulator-data/x-e.txt",sep=","))
y.c1 <- y.c.new
## plots
par(mfrow=c(3,3))
for(i in 1:9) plot(x.test[,i],y.test1,pch=20,cex=0.6)
for(i in 1:9) plot(x.hetgp[,i],y.hetgp1,pch=20,cex=0.6)
for(i in 1:9) plot(x.e[,i],y.e1,pch=20,cex=0.6)
for(i in 1:9) plot(x.c[,i],y.c1,pch=20,cex=0.6)
## define probit
## because availability in (0,1)
inv.probit <- function(q){
pnorm(q)
}
y.test <- probit(y.test1)
y.hetgp <- probit(y.hetgp1)
y.c <- probit(y.c1)
y.e <- probit(y.e1)
probit <- function(p){
qnorm(p)
}
par(mfrow=c(3,3))
for(i in 1:9) plot(x.test[,i],y.test,pch=20,cex=0.6)
for(i in 1:9) plot(x.hetgp[,i],y.hetgp,pch=20,cex=0.6)
for(i in 1:9) plot(x.e[,i],y.e,pch=20,cex=0.6)
for(i in 1:9) plot(x.c[,i],y.c,pch=20,cex=0.6)
MSE <- function(true, pred){
mean((true-pred)^2)
}
Score <- function(y, m, v){
-((y-m)^2)/v - log(v)
}
##training data
x.e.std <- scale(x.e)
x.c.std <- scale(x.c, center = attr(x.e.std, "scaled:center"), scale = attr(x.e.std, "scaled:scale"))
x.std <- scale(x.hetgp)
##scale validation data accordingly
x.v2 <- scale(x.test, center = attr(x.e.std, "scaled:center"), scale = attr(x.e.std, "scaled:scale"))
x.v1 <- scale(x.test, center = attr(x.std, "scaled:center"), scale = attr(x.std, "scaled:scale"))
data.hetGP <- list(
m_p = 10, v_p = 10,
N = length(y.hetgp), K = 9,
x = x.std,
m_H = cbind(1, log(x.hetgp)), v_H = cbind(1, x.std),
y = as.vector(y.hetgp),
a = rep(1,length(y.hetgp)),
## prior
m_beta_m = rep(0, 10), m_beta_s = diag(10^2, 10),
m_a_theta = rep(2,9), m_b_theta = rep(1,9),
m_a_sigma = 2, m_b_sigma = 2,
m_nugget = 0,
v_beta_m = rep(0, 10), v_beta_s = diag(10^2, 10),
v_a_theta = rep(2,9), v_b_theta = rep(1,9),
v_a_sigma = 2, v_b_sigma = 2,
v_nugget_a = 2, v_nugget_b = 2
)
temp <- list()
tmp <-  rstan::optimizing(hetGP, data = data.hetGP, verbose = F, as_vector = F)
st.hetgp <- Sys.time()
temp <- parallel::mclapply(1:3, find.mode, mc.cores = 3)
en.hetgp <- Sys.time() - st.hetgp
en.hetgp
beepr::beep()
best.emulator <- which.max(c(temp[[1]]$value , temp[[2]]$value, temp[[3]]$value))
find.mode <- function(x){
rstan::optimizing(hetGP, data = data.hetGP, verbose = F, as_vector = F)
}
het.fit <- temp[[best.emulator]]
pars <- het.fit$par
## predict response for hetgp
mu.y <- cbind(1, log(x.test))%*%pars$m_beta
mu.yobs <- cbind(1, log(x.hetgp))%*%pars$m_beta
mu.y.var <- as.vector(cbind(1, x.v1)%*%pars$v_beta)
mu.yobs.var <- as.vector(cbind(1, x.std)%*%pars$v_beta)
Mean.het <- cond.mean.het(y.hetgp, x.std, x.v1, pars$m_sigma, pars$m_theta, exp(pars$logLambda), 0, mu.y, mu.yobs, 2)
source("GPfunctionsOptim.R")
source("hetGPfunctions.R")
## need to get the data into shape!
n.ml <- length(y.e)
y.c2 <- rev(y.c)
y.e2 <- rev(y.e)
n.c <- length(y.c2); n.e <- length(y.e2)
x.c.std <- x.c.std[n.c:1,]
x.e.std <- x.e.std[n.ml:1,]
pairs(cbind(y.c2, x.c.std))
pairs(cbind(y.e2, x.e.std))
## reverse everything to get the order correct ...
n.c <- length(y.c2); n.e <- length(y.e2)
plot(y.c2[401:496], y.e2)
plot(y.c2[401:495], y.e2)
cor(y.c2[401:495], y.e2)
readMat(filename)
unlist(readMat(filename)$y)
for(i in 1:495){
filename <- paste("out-new/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
unlist(readMat(filename)$y)
)
}
warnings()
for(i in 1:495){
filename <- paste("out-new/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
plot(y.c.new[1:95, y.e])
plot(y.c.new[1:95], y.e)
plot(y.c.new[401:495], y.e)
for(i in 1:495){
filename <- paste("out-new2/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
plot(y.c.new[401:495], y.e)
for(i in 1:495){
filename <- paste("out-new3/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
plot(y.c.new[401:495], y.e)
x.c[1,]
x.e[1m]
x.e[1,]
plot(probit(y.c.new[401:495]), y.e)
for(i in 1:495){
filename <- paste("out-new/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
plot(probit(y.c.new[401:495]), y.e)
plot(probit(y.c.new[1:95]), y.e)
5+5
plot(probit(y.c.new[1:95]), y.e)
for(i in 1:9){
plot(x.e[i,], y.e)
}
par(mfrow=c(3,3))
for(i in 1:9){
plot(x.e[i,], y.e)
}
for(i in 1:9){
plot(x.e[,i], y.e)
}
for(i in 1:9){
plot(x.c[,i], y.c.new)
}
for(i in 1:495){
filename <- paste("out-new2/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
plot(probit(y.c.new[1:95]), y.e)
par(mfrow=c(3,3))
for(i in 1:9){
plot(x.c[,i], y.c.new)
}
library(R.matlab)
y.c.new <- rep(0, 495)
for(i in 1:495){
filename <- paste("out-new3/OutputOuter",i,".mat", sep="")
y.c.new[i] <- as.double(
mean(unlist(readMat(filename)$y))
)
}
par(mfrow=c(3,3))
for(i in 1:9){
plot(x.c[,i], y.c.new)
}
system("ls")
ploT(probit(y.c.new[1:95]), y.e)
plot(probit(y.c.new[1:95]), y.e)
cor(probit(y.c.new[1:95]), y.e)
y.test1 <- read.table(file = "emulator-data/y-val.txt",sep=",")[,1]
y.hetgp1<- read.table(file = "emulator-data/y-hetgp.txt",sep=",")[,1]
y.c1 <- read.table(file = "emulator-data/y-c.txt",sep=",")[,1]
y.e1 <- read.table(file = "emulator-data/y-e.txt",sep=",")[,1]
#x data
x.test <- as.matrix(read.table(file = "emulator-data/x-val.txt",sep=","))
x.hetgp <- as.matrix(as.matrix(read.table(file = "emulator-data/x-hetgp.txt",sep=",")))
x.c <- as.matrix(read.table(file = "emulator-data/x-c.txt",sep=","))
x.e <- as.matrix(read.table(file = "emulator-data/x-e.txt",sep=","))
y.c1 <- y.c.new
## need to get the data into shape!
n.ml <- length(y.e)
y.c2 <- rev(y.c)
y.e2 <- rev(y.e)
n.c <- length(y.c2); n.e <- length(y.e2)
x.c.std <- x.c.std[n.c:1,]
x.e.std <- x.e.std[n.ml:1,]
pairs(cbind(y.c2, x.c.std))
pairs(cbind(y.e2, x.e.std))
m.h <- cbind(cbind(1, log(x.c[n.c:1,])), rbind(matrix(0, ncol = 10, nrow = n.c - n.e) ,cbind(1, log(x.e[n.e:1,]))))
tail(m.h)
temp <- list()
## reverse everything to get the order correct ...
n.c <- length(y.c2); n.e <- length(y.e2)
ml.data <- list(
## data ##
m_p = 10, v_p = 10,
N = n.e + n.c, K = 9,
n_c = n.c, n_e = n.e,
x_e = x.e.std, x_c = x.c.std,
m_H = m.h, v_H = cbind(1, x.e.std),
y_c = y.c2, y_e = y.e2,
## priors ##
m_beta_m = rep(0, 10), m_beta_s = diag(10^2, 10),
m_a_theta = rep(2, 9), m_b_theta = rep(1, 9),
m_a_sigma = 2, m_b_sigma = 2,
m_nugget = 0,
v_beta_m = rep(0, 10), v_beta_s = diag(10^2, 10),
v_a_theta = rep(2, 9), v_b_theta = rep(1, 9),
v_a_sigma = 2, v_b_sigma = 2,
v_nugget_a = 2, v_nugget_b = 2,
c_beta_m = rep(0, 10), c_beta_s = diag(10^2, 10),
c_a_theta = rep(2, 9), c_b_theta = rep(1, 9),
c_a_sigma = 2, c_b_sigma = 2,
c_nugget_a = 2, c_nugget_b = 2,
m_rho = 1, s_rho = 1/3
)
find.mode <- function(x){
rstan::optimizing(sml, data = ml.data, verbose = F, as_vector = F)
}
st1 <- Sys.time()
temp <- parallel::mclapply(1:3, find.mode, mc.cores = 3)
en1 <- Sys.time()
en1-st1
beepr::beep(4)
pars$rho
best.emulator <- which.max(c(temp[[1]]$value , temp[[2]]$value, temp[[3]]$value))
c(temp[[1]]$value , temp[[2]]$value, temp[[3]]$value)
ml.fit <-  temp[[best.emulator]]
pars <- ml.fit$par
mu.yobs <- c(cbind(1,log(x.c[n.c:1,]))%*%pars$c_beta, cbind(1,log(x.e[n.e:1,]))%*%(pars$rho*pars$c_beta + pars$m_beta))
pars$rho
pars$rho^2
pars$m_sigma
pars$c_sigma
pars$v_sigma
pars$c_theta
pars$m_theta
pars$v_theta
pred.var <- function(prior.var, crosscov, precmat){
prior.var - crosscov %*% precmat %*% t(crosscov)
}
range(y.hetgp)
range(y.hetgp1)
## I now want to predict with SML and hetGP ...
pars <- het.fit$par
betaMoments
x.e
crosscov <- diag(10^2,10)%*%t(cbind(1, log(x.e)))
crosscov <- diag(10^2,10)%*%t(cbind(1, log(x.e)))
beta.het <- betaMoments(y.hetgp, rep(0, 10), diag(10^2, 10), precmat,crosscov)
betaMoments
beta.het <- betaMoments(y.hetgp,H, rep(0, 10), diag(10^2, 10), precmat,crosscov)
precamt
precmat
dim(x.e.std)
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) + cov.x1.x2(x.e.std, x.e.std,pars$m_sigma, pars$m_sigma, 2) + diag(exp(pars$logLambda))
)
)
H <- cbind(1, log(x.e))
crosscov <- diag(10^2,10)%*%t(H)
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) + cov.x1.x2(x.e.std, x.e.std,pars$m_sigma, pars$m_sigma, 2) + diag(exp(pars$logLambda))
)
)
dim(H)
H %*% diag(10^2, 10) %*% t(H)
dim(x.e.std)
diag(exp(pars$logLambda))
length(pars$logLambda)
y,e
y.e
dim(x.e.std)
pars
pars$rho
length(y.hetgp)
x.hetgp
H
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) + cov.x1.x2(x.std, x.std,pars$m_sigma, pars$m_sigma, 2) + diag(exp(pars$logLambda))
)
)
H <- cbind(1, log(x.hetgp))
crosscov <- diag(10^2,10)%*%t(H)
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) + cov.x1.x2(x.std, x.std,pars$m_sigma, pars$m_sigma, 2) + diag(exp(pars$logLambda))
)
)
cov.x1.x2(x.std, x.std,pars$m_sigma, pars$m_sigma, 2)
x.std
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) +
cov.x1.x2(as.matrix(x.std), as.matrix(x.std),pars$m_sigma, pars$m_sigma, 2) +
diag(exp(pars$logLambda))
)
)
cov.x1.x2(as.matrix(x.std), as.matrix(x.std),pars$m_sigma, pars$m_sigma, 2)
as.matrix(x.std)
to.matrix(x.std)
matrix(x.std)
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) +
cov.x1.x2(matrix(x.std), matrix(x.std),pars$m_sigma, pars$m_sigma, 2) +
diag(exp(pars$logLambda))
)
)
cov.x1.x2(matrix(x.std), matrix(x.std),pars$m_sigma, pars$m_sigma, 2)
x.st
dim(x.std)
dim(cov.x1.x2(matrix(x.std), matrix(x.std),pars$m_sigma, pars$m_sigma, 2))
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) +
cov.x1.x2(t(matrix(x.std)), t(matrix(x.std)),pars$m_sigma, pars$m_sigma, 2) +
diag(exp(pars$logLambda))
)
)
dim(cov.x1.x2(t(matrix(x.std)), t(matrix(x.std)),pars$m_sigma, pars$m_sigma, 2))
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) +
cov.x1.x2((matrix(x.std)), (matrix(x.std)),pars$m_sigma, pars$m_theta, 2) +
diag(exp(pars$logLambda))
)
)
dim(cov.x1.x2((matrix(x.std)), (matrix(x.std)),pars$m_sigma, pars$m_theta, 2))
pars$m_theta
pars$m_theta
dim( (matrix(x.std)))
precmat <- chol2inv(
chol(
H %*% diag(10^2, 10) %*% t(H) +
cov.x1.x2(matrix(x.std, ncol=9, byrow=T), matrix(x.std, ncol=9, byrow=T),pars$m_sigma, pars$m_theta, 2) +
diag(exp(pars$logLambda))
)
)
beta.het <- betaMoments(y.hetgp,H, rep(0, 10), diag(10^2, 10), precmat,crosscov)
betaMoments
beta.het <- betaMoments(y.hetgp, H, rep(0, 10), diag(10^2, 10), precmat,crosscov)
precmat
betaMoments <- function(y, H, prior.mean, prior.var, data.precmat, cov.beta.data){
post.mean <- prior.mean + cov.beta.data%*%data.precmat%*%(y-H%*%prior.mean)
post.var <- prior.var + cov.beta.data%*%data.precmat%*%t(cov.beta.data)
res <- list(
mean=post.mean, var=post.var
)
res
}
beta.het <- betaMoments(y.hetgp, H, rep(0, 10), diag(10^2, 10), precmat,crosscov)
beta.het$mean
beta.het$var
10^2
betaMoments <- function(y, H, prior.mean, prior.var, data.precmat, cov.beta.data){
post.mean <- prior.mean + cov.beta.data%*%data.precmat%*%(y-H%*%prior.mean)
post.var <- prior.var - cov.beta.data%*%data.precmat%*%t(cov.beta.data)
res <- list(
mean=post.mean, var=post.var
)
res
}
beta.het <- betaMoments(y.hetgp, H, rep(0, 10), diag(10^2, 10), precmat,crosscov)
beta.het
diag(beta.het$var)
cov2cor(beta.het$var)
pred.mean
pred.mean <- function(y, y.hat, precmat, linear.fit, crosscov){
## y.hat is the "prior mean" of the observed data
linear.fit + crosscov %*% precmat %*% (y - y.hat)
}
predmat
precmat
pred.mean
x.test
linfit <- cbind(1, log(x.test))%*%beta.het$mean
pred.mean
pred.mean(y.hetgp, H%*%beta.het$mean, precmat,linfit,crosscov )
dim(crosscov)
dim(precmat)
length(y.hetgp)
linfit
linfit <- as.vector(cbind(1, log(x.test))%*%beta.het$mean)
pred.mean(y.hetgp, H%*%beta.het$mean, precmat,linfit,crosscov )
pred.mean
pred.mean(y.hetgp, H%*%beta.het$mean, precmat,linfit,crosscov)
H%*%beta.het$mean
pred.mean(y.hetgp, as.vector(H%*%beta.het$mean), precmat,linfit,crosscov)
pred.mead
pred.mean
dim(crosscov)
pred.mean(y.hetgp, as.vector(H%*%beta.het$mean), precmat,linfit,crosscov)
